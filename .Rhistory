percent_trapped <- rank_duiker(`% Trap`) %>%
dplyr::rename("percent_trapped" = rank)
percent_open_forest <- rank_duiker(`% Open forest`) %>%
dplyr::rename("percent_open_forest" = rank)
duiker_data_rank <- left_join(
left_join(
left_join(most_hunted,farthest),
percent_trapped
),
percent_open_forest
) %>%
mutate(rank = "data",
species = factor(species, levels = duiker_code),
fit = NA) %>%
dplyr::select(species,rank,everything()) %>%
arrange(species)
#let's compare!
#fit shows the absolute value of how many positions different than expected
#so the higher the value for fit the least expected
duiker_difference_rank <- tibble(duiker_data_rank[,3:6] -
duiker_expected_rank[,3:6]) %>%
mutate(species = duiker_expected_rank$species,
rank = "difference") %>%
dplyr::select(species,rank,everything())
duiker_difference_rank$fit = rowSums(abs(duiker_difference_rank[,3:6]))
duiker_ranks <- bind_rows(duiker_expected_rank,
duiker_data_rank,
duiker_difference_rank)
duiker_ranks <- left_join(duiker_ranks,spp_code) %>%
dplyr::select("code" = species,
"common_name" = english,
everything())
write_csv(duiker_data, "./outputs/duiker_data.csv")
write_csv(duiker_ranks, "./outputs/duiker_ranks.csv")
#plot them
dat <- as.data.frame(duiker_ranks)
# Remove duiker
dat$short <- NA
dat$short[dat$common_name=="Blue duiker"] <- "Blue"
dat$short[dat$common_name=="Peter's duiker"] <- "Peter's"
dat$short[dat$common_name=="White-bellied duiker"] <- "White-bellied"
dat$short[dat$common_name=="Bay duiker"] <- "Bay"
dat$short[dat$common_name=="Black-fronted duiker"] <- "Black-fronted"
dat$short[dat$common_name=="Yellow-backed duiker"] <- "Yellow-backed"
sps <- unique(dat$common_name)
cols <- colnames(dat)[4:7]
labs<- c("A","B","C","D")
titles<- c("Most hunted", "Farthest from village",
"% Trapped", "% Open forest")
pdf(file = "outputs/figures/duiker_tangle.pdf",
width = 8,
height = 6)
par(mfrow=c(2,2))
par(mar=c(3,8,2,8))
j<- 1
i <- 1
for(j in 1:length(cols))
{
plot(c(0.99,2.01), c(-0.8,-6.1), type="n", xaxt="n", yaxt="n",
xlab="", ylab="", bty="n", main=titles[j])
for(i in 1:length(sps))
{
lines(c(1,2), c(dat[,j+3][dat$common_name==sps[i] & dat$rank=="expected"],
dat[,j+3][dat$common_name==sps[i] & dat$rank=="data"])*-1,
lwd=4, col=rgb(0.4,0.4,0.4))
}
# Left axis
axis(2, at=(dat[,j+3][dat$rank=="expected"])*-1, labels=dat[,"short"][dat$rank=="expected"], las=2)
# Right axis
axis(4, at=(dat[,j+3][dat$rank=="data"])*-1, labels=dat[,"short"][dat$rank=="data"], las=2)
axis(1, at=c(1,2), labels=c("Expected", "Observed"))
#par(xpd=T)
#text(0.1, -0.9, labs[j], cex=1.2)
#par(xpd=F)
}
dev.off()
#5. DUIKER B:M ratio
medium_duiker_code <- c("CMN", "CBA", "CPE", "CFN", "CVB")
vb <- eyo_species_village %>%
group_by(village) %>%
filter(species == "CBL") %>%
dplyr::summarize(b = sum(eyo)) %>%
arrange(desc(b))
vm <- eyo_species_village %>%
group_by(village) %>%
filter(species %in% medium_duiker_code) %>%
dplyr::summarize(m = sum(eyo)) %>%
arrange(desc(m))
#number of household per village
village_bm <- left_join(vb,vm, by = "village") %>%
mutate(bm = b/m) %>%
arrange(desc(bm))
village_households <- p2_eff %>%
group_by(village) %>%
dplyr::summarize(n_household = median(homes_total))
#look at relationship between number of household and B:M ratio
village_bm <-left_join(village_bm,village_households) %>%
dplyr::select(village,n_household,everything())
hist(village_bm$n_household)
hist(village_bm$bm)
#looks like no relationship
plot(village_bm$n_household,
village_bm$bm, pch = 19,
xlab ="Number of households",
ylab = "B:M duiker ratio")
#let's do some simple indicators
village_indicators <- village_bm %>%
dplyr::select(village,n_household,bm)
#briefly also offtake by n_households
eyo_households <- left_join(
eyo_village %>%
dplyr::select(village,eyo),
village_households
) %>%
dplyr::select(village,n_household,eyo)
village_indicators <- left_join(
village_indicators,
eyo_households %>%
dplyr::select(village,eyo),
by = "village"
)
plot(village_indicators$n_household,
village_indicators$eyo, pch = 19,
xlab ="Number of households",
ylab = "Estimated annual offtake")
#and kg
biomass_households <- left_join(
eyo_species_village,
species_meta %>%
dplyr::select(species,bodymass_kg)
)
#village species combos with no estimated kg
nrow(biomass_households %>%
filter(is.na(bodymass_kg)))
#% of the dataset
nrow(biomass_households %>%
filter(is.na(bodymass_kg)))/
nrow(biomass_households)
biomass_households <- biomass_households %>%
filter(!is.na(bodymass_kg)) %>%
mutate(eykg = round(eyo*bodymass_kg,0)) %>%
dplyr::select(village,species,eykg) %>%
group_by(village) %>%
dplyr::summarize(eykg = sum(eykg)) %>%
arrange(desc(eykg))
village_indicators <- left_join(
village_indicators,
biomass_households,
by = "village"
)
##and % sold
p_sold_village <- for_dynamics_hunted %>%
group_by(village) %>%
dplyr::summarize(p_sold = round(mean(use == "V", na.rm = TRUE),2)*100)
village_indicators <- left_join(
village_indicators,
p_sold_village
)
#plot the simple indicators
indicator_plot <- function(choose_x,choose_y,
choose_xlab,choose_ylab) {
plot(choose_x, choose_y,
xlab = choose_xlab,
ylab = choose_ylab,
pch = 19)
}
indicator_plot(village_indicators$n_household, village_indicators$bm,
"Number of households",
"Blue to medium duiker offtake ratio")
indicator_plot(village_indicators$n_household, village_indicators$eyo,
"Number of households",
"Estimated annual offtake")
indicator_plot(village_indicators$n_household, village_indicators$eykg,
"Number of households",
"Estimated annual biomass (kg)")
#biomass is highly correlated with offtake, as expected
indicator_plot(village_indicators$eyo, village_indicators$eykg,
"Estimated annual offtake",
"Estimated annual biomass (kg)")
##what about hunting territory for the 9 villages with it mapped?
#add average offtake and distance walked per hunt
village_indicators <- left_join(
village_indicators,
kde95 %>%
dplyr::select(-gps_hunts)
) %>%
mutate(offtake_dens = eyo/kde95,
kg_dens = eykg/kde95)
#add average offtake and distance walked per hunt
all_hunts <- all_in
hunt_carto_summs <- all_hunts %>%
mutate(offtake_km = offtake/total_km_walked,
kg_km = kg/total_km_walked) %>%
group_by(village) %>%
dplyr::summarize(n_hunts = n(),
offtake_hunt = mean(offtake, na.rm = T),
offtake_km = mean(offtake_km, na.rm = T),
kg_hunt = mean(kg, na.rm = T),
kg_km = mean(kg_km, na.rm = T),
max_km = mean(max_km_village, na.rm = T))
#and kg per animal
kg_animal_village <- left_join(
carto_huntmeat,
all_hunts %>%
dplyr::select(hunt,village)
) %>%
group_by(village) %>%
filter(state == "E") %>%
dplyr::summarize(kg_animal = mean(kg, na.rm = T))
#join the above
village_indicators <- left_join(
left_join(
village_indicators,
hunt_carto_summs %>%
dplyr::select(-n_hunts)
),
kg_animal_village
)
#add bm per hunt
length(unique(carto_huntmeat %>%
filter(species %in% c(medium_duiker_code, "CBL")) %>%
pull(hunt)))
left_join(
carto_huntmeat,
all_hunts %>%
dplyr::select(hunt,village)
) %>%
filter(species %in% c(medium_duiker_code, "CBL")) %>%
group_by(species, hunt, village) %>%
dplyr::summarize(count = n()) %>%
pivot_wider(names_from = species, values_from = count) %>%
replace(is.na(.), 0) %>%
mutate(bmh = CBL / (CBA + CPE + CFN + CVB + CMN))
#keep what you want and clean it up
#drop p_sold as missing in E4
vic <- village_indicators %>%
dplyr::select(village,eykg,eyo,kde95,offtake_dens,kg_dens,
offtake_hunt,offtake_km,kg_hunt,kg_km,
kg_animal,
max_km,
bm
)
#top plot
vip <- vic
colnames(vip) <- c("Village", "$kg~year^-1", "$Animals~year^-1",
"Catchment size", "$Animals~year^-1~km^-2","$kg~year^-1~km^-2",
"$Animals~hunt^-1", "$Animals~km^-1",
"$kg~hunt^-1", "$kg~km^-1","$kg~animal^-1",
"km village", "B:M offtake")
write_csv(vip, "outputs/all_village_indicators.csv")
vip_all <- vip %>%
select_if(~ !any(is.na(.)))
vip_carto <- vip %>%
drop_na()
vip_cut <- vip %>%
filter(Village %ni% c("E4", "E5", "E10")) %>%
drop_na()
vip_noE5 <- vip_carto %>%
filter(Village != "E5") %>%
drop_na()
vip_noE10 <- vip_carto %>%
filter(Village != "E10") %>%
drop_na()
vip_noE4 <- vip_carto %>%
filter(Village != "E4") %>%
drop_na()
make_corr <- function (x) {
cor(x %>%
dplyr::select(-Village))
}
#plot the correlation
#set colours
rgb2hex <- function(x){
hex <- as.hexmode(x)
hex <- as.character(hex)
#   hex <- substr(hex,2,3)
hex <- matrix(hex, nrow = nrow(x), ncol = ncol(x))
hex <- apply(hex,1, function(x){paste0(x,collapse = '')})
hex <- paste0('#',hex)
hex
}
col2hex <- function(col){
rgb <- col2rgb(col)
hex <- rgb2hex(t(rgb))
hex
}
colorInterpolate <- function(val, color=cln, valRange=range(val)){
appx <- approx(valRange, seq(0, 1, length.out = length(valRange)), val, yleft = 0, yright = 1)
cc <- colorRamp(color)(appx$y)
cc <- rgb2hex(floor(cc))
cc
}
cln <- c("#67a9cf","#f7f7f7","#ef8a62")
ColorRamp <- colorInterpolate(1:100, color = cln)
#if you need levels
#min <- -1
#max <- 1
#ColorLevels <- seq(min, max, length=length(ColorRamp))
#plot the correlations
vic_corrplot <- function (x) {
corrplot(x,
#method = "color",
addgrid.col = NA,
col = ColorRamp,
type = "lower",
#order = "hclust",
cl.pos = "b",
#tl.pos = "d",
tl.srt = 45, #rotation
tl.col = "black",
tl.offset = 1,
#tl.cex = 0.9,
diag = FALSE)
}
#make your plot
pdf(file = "outputs/figures/indicator_corr_plot.pdf",
width = 9.5,
height = 7)
vic_corrplot(make_corr(vip_carto))
#add lines and labels
lines(c(0.5,0.5), c(0.5, 11.5), lwd=2, lty=1, col = "darkgrey") #yborder
lines(c(0.5, 5.5), c(7.5, 7.5), lwd=2, lty=1, col = "darkgrey") #village metrics
lines(c(0.5, 11.5), c(1.5, 1.5), lwd=2, lty=1, col = "darkgrey") #hunt metrics
par(xpd=T)
lines(c(-3.8,-3.8), c(1.9,7.1), lwd=2)#, col="darkgrey")
text(-4.1,4.5, "Hunt-level", srt =90)
lines(c(-3.8,-3.8), c(7.9, 11.1), lwd=2)#, col="darkgrey")
text(-4.1,9.5, "Village-level", srt =90)
par(xpd=F)
par(xpd=T)
text(6,-1.1,"Correlation")
dev.off()
#note removing E4 changes things
vic_corrplot(make_corr(vip_noE5))
vic_corrplot(make_corr(vip_noE10))
vic_corrplot(make_corr(vip_noE4))
## MINIMUM DENSITIES COMPARED TO KOERNER DATA
#drop E5 (ceremonial hunts exaggerate hunting area)
dtmp <- eyo_species_village %>%
filter(village %in% kde95$village &
village != "E5") %>%
droplevels() %>%
dplyr::select(village,species,eyo,low_eyo,high_eyo)
odens <- bind_rows(
dtmp %>%
filter(species %in%  c("CPO", "MJG", "HOC", "CBL"),
) %>%
group_by(village,species) %>%
arrange(village,species),
dtmp %>%
filter(species %in%  medium_duiker_code) %>%
group_by(village) %>%
dplyr::summarize(eyo = sum(eyo),
low_eyo = sum(low_eyo),
high_eyo = sum(high_eyo)) %>%
mutate(species = "CMN") %>%
dplyr::select(village, species, everything()) %>%
arrange(village)
) %>%
arrange(village, species)
odens <- left_join(odens,kde95) %>%
mutate(mean_mindens = round(eyo/kde95,2),
low_mindens = round(low_eyo/kde95,2),
high_mindens = round(high_eyo/kde95,2))
kdens <- tibble(species = c("HOC", "CPO", "MJG",
"CMN", "CBL"),
near_kdens = c(6.01,4.54,2.14,1.20,1.31),
int_kdens = c(11.19,8.13,4.34,2.67,2.18),
far_kdens = c(17.42,13.17,8.10,7.33,3.43))
dens <- left_join(
left_join(odens,kdens) %>%
dplyr::select(village,kde95,species,everything()),
species_meta %>%
dplyr::select(species,english))
dens <- dens %>%
ungroup() %>%
dplyr::select(village, kde95,species,
english, everything()) %>%
mutate(diff_mean_near = mean_mindens - near_kdens,
diff_mean_int = mean_mindens - int_kdens) %>%
arrange(species)
dens %>%
print(n = Inf)
#get b:m for both methods as well
#and make data frame for duiker koerner and duiker offtake
slice_kdens <- function (x) {
kdens %>%
filter(species == x) %>%
dplyr::select(-species) %>%
slice() %>%
as.numeric()
}
blue_kdens <- slice_kdens("CBL")
medium_kdens <-slice_kdens("CMN")
dk <- tibble(range = c("near", "int", "far"),
bdens = blue_kdens,
mdens = medium_kdens,
bm = round(blue_kdens/ medium_kdens , 2))
do <- dens %>%
filter(species %in% c("CBL", "CMN")) %>%
dplyr::select(village,species,mean_mindens) %>%
pivot_wider(names_from = species,
values_from = mean_mindens) %>%
dplyr::select(village,bdens = CBL, mdens = CMN)
dtmp <- village_indicators %>%
filter(village %in% do$village) %>%
dplyr::select(village,kde95,bm)
do <- left_join(do,dtmp) %>%
dplyr::select(village,kde95,bdens,mdens,bm) %>%
arrange(kde95)
##add vanvliet densities
duiker_kg
dv <- tibble(bdens = 24.06 / 4.23,
bdens75 = 24.06 / (4.23*0.75) ,
bdensc = 24.06 / 4.39,
pdens = 19.12/(17.8), #CPE
pdens75 = 19.12/(17.8*0.75),
pdensc = 19.12/(14.8),
adens = 12.94/(17.8),#CBA
adens75 = 12.94/(17.8*0.75),
adensc = 12.94/(14.2)) %>%
mutate(mdens = pdens + adens,
mdens75 = pdens75 + adens75,
mdensc = pdensc + adensc)
#plot the differences across methods
#keep bms for all villages
#me is a fake column to have no x-axis
all_bm <- village_indicators %>%
mutate(me = 1) %>%
dplyr::select(village,me,bm)
do$me <- 1
minb <- round(min(c(do$bdens, dk$bdens)),0)
maxb <- round(max(c(do$bdens, dk$bdens)),0)
minm <- round(min(c(do$mdens, dk$mdens)),0)
maxm <- round(max(c(do$mdens, dk$mdens)),0)
minbm <- round(min(c(all_bm$bm, dk$bm)),0)
maxbm <- round(max(c(all_bm$bm, dk$bm)),0)
b_lab <- expression(paste("Blue duiker offtake "," km"^"-2",""))
m_lab <- expression(paste("Medium-sized duiker offtake "," km"^"-2",""))
k_leg <- expression(bold(paste("Living animals ", "km"^"-2", " (Koerner et al., 2017)")))
v_leg <- expression(bold(paste("Offtake ", "km"^"-2", " (van Vliet and Nasi 2008a)")))
dev.off()
pdf(file = "outputs/figures/duiker_densities.pdf",
width = 9.4,
height = 5.8)
par(mfrow=c(1,3))
par(mgp=c(3.5,1,0))
par(mar=c(5,6,4,2)+0.1)
plot(NULL,
xlim = c(0.96,1.04),
cex.lab = 1.8, cex.axis=1.6,
ylim = c(minb,maxb),
xaxt = "n",
xlab = "",
ylab = b_lab)
abline(h = dk$bdens[1], lty = 3, lwd = 3, col = "palegreen4")
abline(h = dk$bdens[2], lty = 2, lwd = 3, col = "palegreen4")
abline(h = dk$bdens[3], lty = 1, lwd = 3, col = "palegreen4")
abline(h = dv$bdensc, lty = 1, lwd = 3, col = "plum3")
abline(h = dv$bdens, lty = 2, lwd = 3, col = "plum3")
abline(h = dv$bdens75, lty = 3,lwd = 3, col = "plum3")
points(do$bdens ~ jitter(do$me), pch = 19, cex = 1.8)
box( col = 'black')
plot(NULL,
xlim = c(0.96,1.04),
cex.lab = 1.8, cex.axis=1.6,
ylim = c(minb,maxb),
xaxt = "n",
xlab = "",
ylab = m_lab)
abline(h = dk$mdens[1], lty = 3, lwd = 3, col = "palegreen4")
abline(h = dk$mdens[2], lty = 2, lwd = 3, col = "palegreen4")
abline(h = dk$mdens[3], lty = 1, lwd = 3, col = "palegreen4")
abline(h = dv$mdensc, lty = 1, lwd = 3, col = "plum3")
abline(h = dv$mdens, lty = 2, lwd = 3, col = "plum3")
abline(h = dv$mdens75, lty = 3, lwd = 3, col = "plum3")
points(do$mdens ~ jitter(do$me), pch = 19, cex = 1.8)
box( col = 'black')
#add legend (xpd fits everyting in, post 4 means left-aligned)
plot.new()
text(-0.51,1, xpd = TRUE, pos = 4, cex = 1.4, k_leg)
legend(#x = "topleft",
-0.11,0.98,
box.lty=0,
#title ="whateves",
#title.adj = 9,
legend=c("Near (< 6 km)",
"Intermediate (6-15 km)",
"Far (> 15 km)"),
col=c(rep("palegreen4",3)),
lty=c(3,2,1),
lwd = c(rep(3,3)),
cex=1.4
)
text(-0.51,0.78, xpd = TRUE, pos = 4, cex = 1.4, v_leg)
legend(-0.11,0.76,
#x = "left",
box.lty=0,
#title = "whateves",
#title.adj = 9,
legend=c("75% of literature weight",
"Reported mean weight",
"Mean weight this study"),
col=c(rep("plum3",3)),
lty=c(3,2,1),
lwd = c(rep(3,3)),
cex=1.4
)
dev.off()
install.packages("renv")
renv::dependencies()
renv::init()
